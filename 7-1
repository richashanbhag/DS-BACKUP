#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertBefore(struct Node** head, int data, int beforeData) {
    struct Node* newNode = createNode(data);
    if ((*head)->data == beforeData) {
        newNode->next = *head;
        *head = newNode;
        return;
    }
    struct Node* temp = *head;
    while (temp->next != NULL && temp->next->data != beforeData) {
        temp = temp->next;
    }
    if (temp->next != NULL) {
        newNode->next = temp->next;
        temp->next = newNode;
    }
}

void insertAfter(struct Node* head, int data, int afterData) {
    struct Node* temp = head;
    while (temp != NULL && temp->data != afterData) {
        temp = temp->next;
    }
    if (temp != NULL) {
        struct Node* newNode = createNode(data);
        newNode->next = temp->next;
        temp->next = newNode;
    }
}

void deleteNode(struct Node** head, int key) {
    struct Node* temp = *head;
    struct Node* prev = NULL;
    if (temp != NULL && temp->data == key) {
        *head = temp->next;
        free(temp);
        return;
    }
    while (temp != NULL && temp->data != key) {
        prev = temp;
        temp = temp->next;
    }
    if (temp == NULL) return;
    prev->next = temp->next;
    free(temp);
}

void traverseList(struct Node* head) {
    while (head != NULL) {
        printf("%d -> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}

void reverseList(struct Node** head) {
    struct Node *prev = NULL, *current = *head, *next = NULL;
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    *head = prev;
}

void sortList(struct Node** head) {
    struct Node *i, *j;
    int temp;
    for (i = *head; i != NULL; i = i->next) {
        for (j = i->next; j != NULL; j = j->next) {
            if (i->data > j->data) {
                temp = i->data;
                i->data = j->data;
                j->data = temp;
            }
        }
    }
}

void deleteAlternateNodes(struct Node** head) {
    struct Node* temp = *head;
    while (temp != NULL && temp->next != NULL) {
        struct Node* next = temp->next;
        temp->next = next->next;
        free(next);
        temp = temp->next;
    }
}

void insertInSortedOrder(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL || (*head)->data >= data) {
        newNode->next = *head;
        *head = newNode;
        return;
    }
    struct Node* temp = *head;
    while (temp->next != NULL && temp->next->data < data) {
        temp = temp->next;
    }
    newNode->next = temp->next;
    temp->next = newNode;
}

int main() {
    struct Node* head = NULL;
    int choice, value, before, after;

    do {
        printf("\n1. Insert before\n2. Insert after\n3. Delete node\n4. Traverse\n5. Reverse\n6. Sort\n7. Delete alternate nodes\n8. Insert in sorted list\n9. Exit\n");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter value to insert and value before: ");
                scanf("%d %d", &value, &before);
                insertBefore(&head, value, before);
                break;
            case 2:
                printf("Enter value to insert and value after: ");
                scanf("%d %d", &value, &after);
                insertAfter(head, value, after);
                break;
            case 3:
                printf("Enter value to delete: ");
                scanf("%d", &value);
                deleteNode(&head, value);
                break;
            case 4:
                traverseList(head);
                break;
            case 5:
                reverseList(&head);
                break;
            case 6:
                sortList(&head);
                break;
            case 7:
                deleteAlternateNodes(&head);
                break;
            case 8:
                printf("Enter value to insert in sorted list: ");
                scanf("%d", &value);
                insertInSortedOrder(&head, value);
                break;
        }
    } while (choice != 9);

    return 0;
}
