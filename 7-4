#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* alternateMerge(struct Node* X, struct Node* Y) {
    if (X == NULL) return Y;
    if (Y == NULL) return X;
    struct Node* Z = X;
    X = X->next;
    Z->next = alternateMerge(Y, X);
    return Z;
}

void traverseList(struct Node* head) {
    while (head != NULL) {
        printf("%d -> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* X = NULL;
    struct Node* Y = NULL;
    struct Node* Z;
    int data;

    printf("Enter elements for list X (-1 to stop): ");
    while (1) {
        scanf("%d", &data);
        if (data == -1) break;
        struct Node* newNode = createNode(data);
        if (X == NULL) {
            X = newNode;
        } else {
            struct Node* temp = X;
            while (temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    printf("Enter elements for list Y (-1 to stop): ");
    while (1) {
        scanf("%d", &data);
        if (data == -1) break;
        struct Node* newNode = createNode(data);
        if (Y == NULL) {
            Y = newNode;
        } else {
            struct Node* temp = Y;
            while (temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    Z = alternateMerge(X, Y);

    printf("Alternately merged list: ");
    traverseList(Z);

    return 0;
}
