#include <stdio.h>
#include <ctype.h>
#include <string.h>

#define MAX 100

char stack[MAX];
int top = -1;

void push(char c) {
    if (top < MAX - 1)
        stack[++top] = c;
}

char pop() {
    if (top != -1)
        return stack[top--];
    return '\0';
}

int precedence(char c) {
    if (c == '+' || c == '-')
        return 1;
    if (c == '*' || c == '/')
        return 2;
    if (c == '^')
        return 3;
    return 0;
}



void reverse(char* exp) {
    int len = strlen(exp);
    for (int i = 0; i < len / 2; i++) {
        char temp = exp[i];
        exp[i] = exp[len - i - 1];
        exp[len - i - 1] = temp;
    }
}

void infixToPrefix(char* infix, char* prefix) {
    int k = 0;
    
    reverse(infix);
    
    for (int i = 0; infix[i]; i++) {
        char c = infix[i];
        
        if (isalnum(c))
            prefix[k++] = c;
        else if (c == ')')
            push(c);
        else if (c == '(') {
            while (top != -1 && stack[top] != ')')
                prefix[k++] = pop();
            pop(); 
        } else {
            while (top != -1 && precedence(c) <= precedence(stack[top]))
                prefix[k++] = pop();
            push(c);
        }
    }
    
    while (top != -1)
        prefix[k++] = pop();
    
    prefix[k] = '\0';
    
    reverse(prefix);
}

int main() {
    char infix[MAX], prefix[MAX];
    
    printf("Enter an infix expression: ");
    gets(infix);
    
    infixToPrefix(infix, prefix);
    
    printf("Prefix expression: %s\n", prefix);
    
    return 0;
}
