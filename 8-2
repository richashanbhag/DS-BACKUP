#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};

struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}

void insertRear(struct Node** head, int value) {
    struct Node* newNode = createNode(value);
    if (*head == NULL) {
        *head = newNode;
        return;
    }

    struct Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
    newNode->prev = temp;
}

void traverse(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

void concatenate(struct Node** head1, struct Node** head2) {
    if (*head1 == NULL) {
        *head1 = *head2;
        return;
    }
    
    struct Node* temp = *head1;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    
    temp->next = *head2;
    if (*head2 != NULL)
        (*head2)->prev = temp;
}

int main() {
    struct Node* X1 = NULL;
    struct Node* X2 = NULL;

    int n1, n2, value;

    printf("Enter number of elements in list X1: ");
    scanf("%d", &n1);
    for (int i = 0; i < n1; i++) {
        printf("Enter element %d for X1: ", i + 1);
        scanf("%d", &value);
        insertRear(&X1, value);
    }

    printf("Enter number of elements in list X2: ");
    scanf("%d", &n2);
    for (int i = 0; i < n2; i++) {
        printf("Enter element %d for X2: ", i + 1);
        scanf("%d", &value);
        insertRear(&X2, value);
    }

    printf("List X1 before concatenation: ");
    traverse(X1);

    printf("List X2 before concatenation: ");
    traverse(X2);

    concatenate(&X1, &X2);

    printf("List after concatenation: ");
    traverse(X1);

    return 0;
}
