#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coeff;
    int pow;
    struct Node* prev;
    struct Node* next;
};

struct Node* createNode(int c, int p) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coeff = c;
    newNode->pow = p;
    newNode->next = newNode->prev = NULL;
    return newNode;
}

void insert(struct Node* head, int c, int p) {
    struct Node* newNode = createNode(c, p);
    struct Node* temp = head->prev;
    newNode->next = head;
    newNode->prev = temp;
    temp->next = newNode;
    head->prev = newNode;
}

void display(struct Node* head) {
    struct Node* temp = head->next;
    if (temp == head) {
        printf("Polynomial is empty\n");
        return;
    }
    while (temp != head) {
        printf("%dx^%d", temp->coeff, temp->pow);
        temp = temp->next;
        if (temp != head)
            printf(" + ");
    }
    printf("\n");
}

void addPolynomials(struct Node* poly1, struct Node* poly2, struct Node* result) {
    struct Node* temp1 = poly1->next;
    struct Node* temp2 = poly2->next;

    while (temp1 != poly1 && temp2 != poly2) {
        if (temp1->pow == temp2->pow) {
            insert(result, temp1->coeff + temp2->coeff, temp1->pow);
            temp1 = temp1->next;
            temp2 = temp2->next;
        } else if (temp1->pow > temp2->pow) {
            insert(result, temp1->coeff, temp1->pow);
            temp1 = temp1->next;
        } else {
            insert(result, temp2->coeff, temp2->pow);
            temp2 = temp2->next;
        }
    }

    while (temp1 != poly1) {
        insert(result, temp1->coeff, temp1->pow);
        temp1 = temp1->next;
    }

    while (temp2 != poly2) {
        insert(result, temp2->coeff, temp2->pow);
        temp2 = temp2->next;
    }
}

int main() {
    struct Node *poly1, *poly2, *result;

    poly1 = createNode(0, 0);
    poly1->next = poly1->prev = poly1;

    poly2 = createNode(0, 0);
    poly2->next = poly2->prev = poly2;

    result = createNode(0, 0);
    result->next = result->prev = result;

    insert(poly1, 3, 2);
    insert(poly1, 5, 1);
    insert(poly1, 4, 0);

    insert(poly2, 2, 2);
    insert(poly2, 5, 1);
    insert(poly2, 1, 0);

    printf("Polynomial 1: ");
    display(poly1);
    printf("Polynomial 2: ");
    display(poly2);

    addPolynomials(poly1, poly2, result);

    printf("Resultant Polynomial: ");
    display(result);

    return 0;
}
